import { dev } from '$app/environment';

/**
 * Store de Logger para Desenvolvimento
 * S√≥ executa logs em ambiente de desenvolvimento
 * Mensagens humanizadas em portugu√™s brasileiro
 * 
 * Modos:
 * - default: Logs essenciais e leg√≠veis para humanos
 * - verbose: Logs detalhados para m√°quinas/IA e debugging avan√ßado
 */
class DevLogger {
    constructor() {
        this.isDev = dev;
        this.prefix = 'ÔøΩ [ED]';
        this.verboseMode = false; // Modo verbose desabilitado por padr√£o
        this.transitionTimers = new Map();
        this.thresholds = {
            transition: 300,
            animation: 500
        };

        // Configurar modo verbose via localStorage ou query param
        this.initVerboseMode();
    }

    /**
     * Inicializa o modo verbose baseado em prefer√™ncias
     */
    initVerboseMode() {
        if (!this.isDev) return;

        try {
            // Verificar query parameter
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('verbose') === 'true') {
                this.verboseMode = true;
                localStorage.setItem('ed-logger-verbose', 'true');
                return;
            }

            // Verificar localStorage
            const stored = localStorage.getItem('ed-logger-verbose');
            this.verboseMode = stored === 'true';
        } catch {
            // Fallback silencioso se localStorage n√£o estiver dispon√≠vel
            this.verboseMode = false;
        }
    }

    /**
     * Habilita/desabilita o modo verbose
     */
    setVerbose(enabled = true) {
        if (!this.isDev) return;

        this.verboseMode = enabled;
        try {
            localStorage.setItem('ed-logger-verbose', enabled.toString());
        } catch {
            // Ignorar erro se localStorage n√£o estiver dispon√≠vel
        }

        this.info(`Modo verbose ${enabled ? 'ativado' : 'desativado'} üîß`);
    }

    /**
     * Verifica se o modo verbose est√° ativo
     */
    isVerbose() {
        return this.isDev && this.verboseMode;
    }

    /**
     * Log gen√©rico com timestamp humanizado (simplificado)
     */
    log(message, ...args) {
        if (!this.isDev) return;

        if (this.verboseMode) {
            const time = new Date().toLocaleTimeString('pt-BR');
            console.log(`${this.prefix} ${time} - ${message}`, ...args);
        } else {
            console.log(`${this.prefix} ${message}`, ...args);
        }
    }

    /**
     * Log de informa√ß√£o
     */
    info(message, ...args) {
        if (!this.isDev) return;
        console.info(`${this.prefix} ‚ÑπÔ∏è ${message}`, ...args);
    }

    /**
     * Log de aviso
     */
    warn(message, ...args) {
        if (!this.isDev) return;
        console.warn(`${this.prefix} ‚ö†Ô∏è ${message}`, ...args);
    }

    /**
     * Log de erro
     */
    error(message, ...args) {
        if (!this.isDev) return;
        console.error(`${this.prefix} ‚ùå ${message}`, ...args);
    }

    /**
     * Log espec√≠fico para tema com mensagens humanizadas
     */
    theme(action, data) {
        if (!this.isDev) return;

        const actionMessages = {
            'DETECT_SYSTEM': 'üîç Detectando tema do sistema',
            'AUTO_RESTORE_USER_PREFERENCE': 'üîÑ Restaurando prefer√™ncia do usu√°rio',
            'APPLY_THEME': 'üé® Aplicando tema',
            'THEME_APPLIED': '‚úÖ Tema aplicado',
            'SET_THEME_CALLED': 'üëÜ Tema selecionado pelo usu√°rio',
            'AUTO_APPLY_THEME': 'üîÑ Aplica√ß√£o autom√°tica',
            'AUTO_INIT_COMPLETE': 'üöÄ Sistema de temas inicializado',
            'SYSTEM_THEME_AUTO_CHANGED': 'üåì Sistema mudou o tema automaticamente',
            'TRANSITION_START': 'üé¨ Transi√ß√£o iniciada',
            'TRANSITION_END': 'üé≠ Transi√ß√£o finalizada',
            'TRANSITION_TIMEOUT': '‚è∞ Transi√ß√£o demorou mais que o esperado'
        };

        const message = actionMessages[action] || `üé® TEMA: ${action}`;

        if (this.verboseMode) {
            // Modo verbose: logs detalhados com grupos
            console.group(`${this.prefix} ${message}`);
            console.log('üïí Hor√°rio:', new Date().toLocaleTimeString('pt-BR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                fractionalSecondDigits: 3
            }));

            if (data) {
                this.formatDataOutput(data);
            }
            console.groupEnd();
        } else {
            // Modo padr√£o: log simples
            if (data && Object.keys(data).length > 0) {
                const summary = this.getDataSummary(data);
                console.log(`${this.prefix} ${message}${summary ? ` - ${summary}` : ''}`);
            } else {
                console.log(`${this.prefix} ${message}`);
            }
        }
    }

    /**
     * Log para performance de transi√ß√µes (simplificado)
     */
    transition(action, data = {}) {
        if (!this.isDev) return;

        switch (action) {
            case 'START': {
                const transitionId = data.id || 'default';
                this.transitionTimers.set(transitionId, performance.now());

                if (this.verboseMode) {
                    console.group(`${this.prefix} üé¨ Transi√ß√£o iniciada: ${data.type || 'tema'}`);
                    console.log('üïí Iniciado em:', new Date().toLocaleTimeString('pt-BR', {
                        hour: '2-digit', minute: '2-digit', second: '2-digit', fractionalSecondDigits: 3
                    }));
                    console.log('üÜî ID:', transitionId);
                    if (data.from && data.to) console.log(`üîÑ Mudan√ßa: ${data.from} ‚Üí ${data.to}`);
                    if (data.duration) console.log(`‚è±Ô∏è Dura√ß√£o esperada: ${data.duration}ms`);
                    console.groupEnd();
                } else {
                    const change = data.from && data.to ? ` ${data.from} ‚Üí ${data.to}` : '';
                    console.log(`${this.prefix} üé¨ Transi√ß√£o iniciada${change}`);
                }
                break;
            }

            case 'END': {
                const endId = data.id || 'default';
                const startTime = this.transitionTimers.get(endId);

                if (startTime) {
                    const duration = performance.now() - startTime;
                    const expected = data.expectedDuration || this.thresholds.transition;
                    const isSlowly = duration > expected;

                    if (this.verboseMode || isSlowly) {
                        const icon = isSlowly ? 'üêå' : '‚ö°';
                        console.log(`${this.prefix} ${icon} Transi√ß√£o finalizada em ${duration.toFixed(0)}ms${isSlowly ? ' (lenta!)' : ''}`);

                        if (this.verboseMode) {
                            console.group(`${this.prefix} ${icon} Detalhes da transi√ß√£o`);
                            console.log(`‚è±Ô∏è Dura√ß√£o: ${duration.toFixed(2)}ms`);
                            console.log(`üéØ Esperado: ${expected}ms`);
                            if (isSlowly) {
                                console.log(`‚ö†Ô∏è Atraso: ${(duration - expected).toFixed(2)}ms`);
                            }
                            console.groupEnd();
                        }
                    } else {
                        console.log(`${this.prefix} ‚ö° Transi√ß√£o finalizada em ${duration.toFixed(0)}ms`);
                    }

                    this.transitionTimers.delete(endId);
                    return isSlowly;
                }
                break;
            }

            case 'TIMEOUT': {
                const timeoutId = data.id || 'default';
                const timeoutStart = this.transitionTimers.get(timeoutId);

                if (timeoutStart) {
                    const elapsed = performance.now() - timeoutStart;
                    console.log(`${this.prefix} ‚è∞ Timeout da transi√ß√£o ap√≥s ${elapsed.toFixed(0)}ms`);
                    this.transitionTimers.delete(timeoutId);
                    return true;
                }
                break;
            }
        }

        return false;
    }

    /**
     * Formatar sa√≠da de dados de forma mais leg√≠vel
     */
    formatDataOutput(data) {
        Object.entries(data).forEach(([key, value]) => {
            const formattedKey = this.formatKey(key);
            console.log(`üìã ${formattedKey}:`, value);
        });
    }

    /**
     * Formatar chaves para portugu√™s mais leg√≠vel
     */
    formatKey(key) {
        const keyMap = {
            'Has user interaction': 'Usu√°rio j√° interagiu',
            'User theme': 'Tema escolhido pelo usu√°rio',
            'Current theme (from store)': 'Tema atual (da store)',
            'Current theme (effective)': 'Tema efetivo atual',
            'Old current theme': 'Tema atual anterior',
            'New current theme (effective)': 'Novo tema efetivo',
            'Old user theme': 'Tema do usu√°rio anterior',
            'New user theme (choice)': 'Nova escolha do usu√°rio',
            'Old has interaction': 'Tinha intera√ß√£o anterior',
            'New has interaction': 'Nova intera√ß√£o',
            'Theme requested': 'Tema solicitado',
            'Theme set to': 'Tema definido para',
            'Media query matches': 'Media query corresponde',
            'Sistema detectado': 'Sistema detectado',
            'Restored theme': 'Tema restaurado',
            'Tema solicitado': 'Tema solicitado',
            'Browser dispon√≠vel': 'Navegador dispon√≠vel',
            'Document ready': 'Documento pronto',
            'Classes removidas': 'Classes removidas',
            'Nova classe': 'Nova classe',
            'Classes atuais': 'Classes atuais',
            'Era v√°lido': 'Era v√°lido',
            'from': 'de',
            'to': 'para',
            'duration': 'dura√ß√£o',
            'type': 'tipo'
        };

        return keyMap[key] || key;
    }

    /**
     * Cria um resumo dos dados para o modo padr√£o
     */
    getDataSummary(data) {
        if (!data || typeof data !== 'object') return '';

        const keys = Object.keys(data);
        if (keys.length === 0) return '';

        // Identifica valores importantes
        const importantValues = [];

        keys.forEach(key => {
            const value = data[key];
            const lowerKey = key.toLowerCase();

            // Valores que s√£o interessantes para resumo
            if (lowerKey.includes('tema') || lowerKey.includes('theme')) {
                importantValues.push(value);
            } else if (lowerKey.includes('componente') || lowerKey.includes('component')) {
                importantValues.push(value);
            } else if (lowerKey.includes('de') && lowerKey.includes('para')) {
                importantValues.push(`${data[key]}`);
            }
        });

        if (importantValues.length > 0) {
            return importantValues.join(' ‚Üí ');
        }

        // Fallback: primeiro valor se n√£o encontrou nada espec√≠fico
        return keys.length === 1 ? String(data[keys[0]]) : `${keys.length} propriedades`;
    }

    /**
     * Log para intera√ß√µes de componentes (simplificado)
     */
    component(componentName, action, data = {}) {
        if (!this.isDev) return;

        const actionMessages = {
            'GET_DISPLAY_ICON_DEBUG': 'üîç Verificando √≠cone',
            'GET_DISPLAY_ICON': 'üéØ √çcone selecionado',
            'MAIN_THEME_UPDATE': 'üîÑ Tema atualizado',
            'USER_THEME_UPDATE': 'üë§ Prefer√™ncia atualizada',
            'INTERACTION_UPDATE': 'üëÜ Intera√ß√£o registrada',
            'UNSUBSCRIBE_ALL': 'üßπ Limpeza realizada',
            'SELECT_THEME': 'üé® Tema selecionado',
            'THEME_SET_CALLED': '‚úÖ Fun√ß√£o chamada',
            'MOUNT': 'üöÄ Componente montado'
        };

        const message = actionMessages[action] || action;

        if (this.verboseMode) {
            // Modo verbose: logs detalhados
            console.group(`${this.prefix} üß© ${componentName.toUpperCase()}: ${message}`);
            console.log('üïí Hor√°rio:', new Date().toLocaleTimeString('pt-BR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                fractionalSecondDigits: 3
            }));
            this.formatDataOutput(data);
            console.groupEnd();
        } else {
            // Modo padr√£o: log simples
            const summary = this.getDataSummary(data);
            console.log(`${this.prefix} üß© ${componentName}: ${message}${summary ? ` - ${summary}` : ''}`);
        }
    }

    /**
     * Log para stores (simplificado)
     */
    store(storeName, action, oldValue, newValue) {
        if (!this.isDev) return;

        const actionMessages = {
            'DERIVED_UPDATE': 'üîÑ Valor derivado atualizado',
            'SET': 'üìù Valor definido',
            'UPDATE': 'üîÑ Valor atualizado',
            'SUBSCRIBE': 'üëÇ Nova inscri√ß√£o',
            'UNSUBSCRIBE': 'üëã Inscri√ß√£o removida'
        };

        const message = actionMessages[action] || action;

        if (this.verboseMode) {
            console.group(`${this.prefix} üì¶ STORE ${storeName.toUpperCase()}: ${message}`);
            console.log('üïí Hor√°rio:', new Date().toLocaleTimeString('pt-BR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                fractionalSecondDigits: 3
            }));
            if (oldValue !== undefined) console.log('üìã Valor anterior:', oldValue);
            if (newValue !== undefined) console.log('üìã Novo valor:', newValue);
            console.groupEnd();
        } else {
            // Modo padr√£o: apenas mudan√ßas de valor importantes
            if (action === 'SET' || action === 'UPDATE') {
                const change = oldValue !== undefined && newValue !== undefined
                    ? ` ${oldValue} ‚Üí ${newValue}`
                    : newValue !== undefined ? ` ‚Üí ${newValue}` : '';
                console.log(`${this.prefix} üì¶ ${storeName}: ${message}${change}`);
            }
        }
    }

    /**
     * Log para eventos do DOM (simplificado)
     */
    dom(element, event, data = {}) {
        if (!this.isDev) return;

        const eventMessages = {
            'REMOVE_CLASSES': 'üßπ Classes removidas',
            'ADD_CLASS': '‚ûï Classe adicionada',
            'CSS_FIRST_STRATEGY': 'üé® Estrat√©gia CSS primeiro',
            'FALLBACK': 'üîÑ Fallback aplicado',
            'CSS_VARIABLES': 'üé® Vari√°veis CSS atualizadas',
            'TRANSITION_TRIGGER': 'üé¨ Transi√ß√£o disparada',
            'LAYOUT_FLUSH': 'üìê Layout recalculado'
        };

        const message = eventMessages[event] || event;

        if (this.verboseMode) {
            console.group(`${this.prefix} üåê DOM ${element}: ${message}`);
            console.log('üïí Hor√°rio:', new Date().toLocaleTimeString('pt-BR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                fractionalSecondDigits: 3
            }));
            this.formatDataOutput(data);
            console.groupEnd();
        } else {
            // Modo padr√£o: apenas eventos importantes
            const importantEvents = ['CSS_VARIABLES', 'TRANSITION_TRIGGER', 'FALLBACK'];
            if (importantEvents.includes(event)) {
                console.log(`${this.prefix} üåê ${element}: ${message}`);
            }
        }
    }

    /**
     * Log espec√≠fico para interpola√ß√£o de cores (simplificado)
     */
    colorInterpolation(from, to, progress, result) {
        if (!this.isDev || !this.verboseMode) return; // Apenas no modo verbose

        console.group(`${this.prefix} üåà Interpola√ß√£o de Cores`);
        console.log('üïí Hor√°rio:', new Date().toLocaleTimeString('pt-BR', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            fractionalSecondDigits: 3
        }));
        console.log('üìã Cor inicial:', from);
        console.log('üìã Cor final:', to);
        console.log('üìã Progresso:', `${(progress * 100).toFixed(1)}%`);
        console.log('üìã Resultado:', result);
        console.groupEnd();
    }

    /**
     * Inicia um grupo de logs
     */
    group(name) {
        if (!this.isDev) return;
        console.group(`${this.prefix} üìã ${name}`);
    }

    /**
     * Termina um grupo de logs
     */
    groupEnd() {
        if (!this.isDev) return;
        console.groupEnd();
    }

    /**
     * Log com tabela
     */
    table(data, label = 'Dados') {
        if (!this.isDev) return;
        console.log(`${this.prefix} üìä ${label}:`);
        console.table(data);
    }

    /**
     * Limpa o console (s√≥ em dev)
     */
    clear() {
        if (!this.isDev) return;
        console.clear();
        this.log('Console limpo');
    }

    /**
     * M√©todo para verificar se transi√ß√µes est√£o lentas
     * Retorna estat√≠sticas das transi√ß√µes
     */
    getTransitionStats() {
        if (!this.isDev) return null;

        const activeTransitions = Array.from(this.transitionTimers.entries()).map(([id, startTime]) => ({
            id,
            elapsed: performance.now() - startTime,
            status: 'em_andamento'
        }));

        return {
            transi√ß√µes_ativas: activeTransitions.length,
            transi√ß√µes_em_andamento: activeTransitions,
            limite_transi√ß√£o: this.thresholds.transition,
            limite_anima√ß√£o: this.thresholds.animation
        };
    }

    /**
     * Configura novos limites de performance
     */
    setThresholds(transition = 300, animation = 500) {
        if (!this.isDev) return;

        this.thresholds.transition = transition;
        this.thresholds.animation = animation;

        this.info(`Novos limites configurados: Transi√ß√£o ${transition}ms, Anima√ß√£o ${animation}ms`);
    }

    /**
     * Log espec√≠fico para anima√ß√µes JavaScript (simplificado)
     */
    animation(action, data = {}) {
        if (!this.isDev) return;

        const actionMessages = {
            'START': 'üé¨ Anima√ß√£o iniciada',
            'STEP': 'üìà Passo da anima√ß√£o',
            'PROGRESS': '‚è≥ Progresso',
            'COMPLETE': '‚úÖ Anima√ß√£o conclu√≠da',
            'ERROR': '‚ùå Erro na anima√ß√£o',
            'INTERPOLATE': 'üîÑ Interpola√ß√£o',
            'EASING': 'üìä Easing aplicado',
            'COMPONENT_MOUNT': 'üöÄ Componente montado',
            'MOUNT_INIT_CALL': 'ÔøΩ Inicializando anima√ß√µes',
            'COMPONENT_UNMOUNT': 'üëã Componente desmontado',
            'COMPONENT_UNMOUNT_COMPLETE': '‚úÖ Limpeza conclu√≠da',
            'STORE_SET_ACTIVE': '‚ö° Anima√ß√µes ativadas/desativadas',
            'STORE_INIT_START': 'üéØ Inicializando elementos',
            'STORE_ANIMATION_CREATED': '‚ú® Anima√ß√£o criada',
            'STORE_ANIMATION_READY': 'ÔøΩ Anima√ß√£o pronta'
        };

        const message = actionMessages[action] || `üé≠ ${action}`;

        if (this.verboseMode) {
            // Modo verbose: logs detalhados
            console.group(`${this.prefix} ${message}`);
            console.log('üïí Hor√°rio:', new Date().toLocaleTimeString('pt-BR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                fractionalSecondDigits: 3
            }));
            this.formatDataOutput(data);
            console.groupEnd();
        } else {
            // Modo padr√£o: log simples apenas para eventos importantes
            const importantActions = [
                'COMPONENT_MOUNT', 'COMPONENT_UNMOUNT', 'STORE_SET_ACTIVE',
                'STORE_INIT_START', 'ERROR', 'COMPLETE'
            ];

            if (importantActions.includes(action)) {
                const summary = this.getDataSummary(data);
                console.log(`${this.prefix} ${message}${summary ? ` - ${summary}` : ''}`);
            }
        }
    }

    /**
     * Exibe um resumo das capacidades do logger
     */
    showCapabilities() {
        if (!this.isDev) return;

        console.group(`${this.prefix} üìö Logger ED | Acima das Nuvens`);

        console.log(`üîß Modo atual: ${this.verboseMode ? 'VERBOSE' : 'PADR√ÉO'}`);
        console.log('');

        if (this.verboseMode) {
            console.log('üìä MODO VERBOSE - Logs detalhados para debugging');
            console.log('‚Ä¢ Timestamps precisos com milissegundos');
            console.log('‚Ä¢ Grupos expandidos com dados completos');
            console.log('‚Ä¢ Interpola√ß√£o de cores rastreada');
            console.log('‚Ä¢ Todos os eventos de anima√ß√£o');
            console.log('‚Ä¢ Performance de transi√ß√µes detalhada');
        } else {
            console.log('ÔøΩ‚Äçüíª MODO PADR√ÉO - Logs essenciais para humanos');
            console.log('‚Ä¢ Mensagens simples e diretas');
            console.log('‚Ä¢ Apenas eventos importantes');
            console.log('‚Ä¢ Resumos autom√°ticos de dados');
            console.log('‚Ä¢ Alertas de performance preservados');
        }

        console.log('');
        console.group('ÔøΩÔ∏è Controles dispon√≠veis:');
        console.log('‚Ä¢ logger.setVerbose(true) - Ativar modo verbose');
        console.log('‚Ä¢ logger.setVerbose(false) - Ativar modo padr√£o');
        console.log('‚Ä¢ logger.isVerbose() - Verificar modo atual');
        console.log('‚Ä¢ ?verbose=true na URL - Ativar verbose temporariamente');
        console.groupEnd();

        console.group('üìä M√©todos de log:');
        console.log('‚Ä¢ logger.theme(action, data) - Eventos de tema');
        console.log('‚Ä¢ logger.component(name, action, data) - Componentes');
        console.log('‚Ä¢ logger.animation(action, data) - Anima√ß√µes');
        console.log('‚Ä¢ logger.transition(action, data) - Transi√ß√µes');
        console.log('‚Ä¢ logger.store(name, action, oldVal, newVal) - Stores');
        console.log('‚Ä¢ logger.dom(element, event, data) - DOM');
        console.groupEnd();

        console.group('üéØ Caracter√≠sticas:');
        console.log('‚úÖ Portugu√™s brasileiro humanizado');
        console.log('‚úÖ Redu√ß√£o de bloating de dados');
        console.log('‚úÖ Modo padr√£o otimizado para leitura humana');
        console.log('‚úÖ Modo verbose para an√°lise t√©cnica');
        console.log('‚úÖ Alertas autom√°ticos para performance');
        console.log('‚úÖ Persist√™ncia de prefer√™ncias');
        console.groupEnd();

        console.groupEnd();
    }
}

// Exporta inst√¢ncia √∫nica
export const logger = new DevLogger();

// Mostra capacidades na primeira vez que o logger √© importado (apenas em dev)
if (logger.isDev) {
    logger.showCapabilities();
}
