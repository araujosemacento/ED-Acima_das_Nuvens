@use "sass:map";
@use "sass:color";

// Material Design 3 Themes - Mapeamento para variáveis customizadas
$md3-themes: (
  light: (
    // Cores principais
    text: rgb(23 29 26),
    background: rgb(245 251 245),
    primary: rgb(31 106 78),
    secondary: rgb(77 99 87),
    accent: rgb(159 91 121),
    // Accent custom derivado do tertiary
    // Superfícies e bordas
    surface: rgb(245 251 245),
    surface-variant: rgb(219 229 221),
    surface-container: rgb(234 239 234),
    surface-container-low: rgb(239 245 239),
    surface-container-high: rgb(228 234 228),
    // Bordas e contornos
    border: rgb(191 201 194),
    outline: rgb(112 121 115),
    outline-variant: rgb(191 201 194),
    // Estados e feedback
    on-primary: rgb(255 255 255),
    on-secondary: rgb(255 255 255),
    on-surface: rgb(23 29 26),
    on-surface-variant: rgb(64 73 67),
    // Containers
    primary-container: rgb(168 242 206),
    secondary-container: rgb(207 233 217),
    tertiary-container: rgb(193 232 251),
    // Cores de estado
    error: rgb(186 26 26),
    on-error: rgb(255 255 255),
    // Utilitárias
    muted: rgb(112 121 115),
    shadow: rgb(0 0 0),
    inverse-surface: rgb(44 50 46),
    inverse-on-surface: rgb(237 242 236),
  ),

  dark: (
    // Cores principais
    text: rgb(222 228 222),
    background: rgb(15 21 17),
    primary: rgb(141 213 179),
    secondary: rgb(179 204 190),
    accent: rgb(185 157 175),
    // Accent custom derivado do tertiary
    // Superfícies e bordas
    surface: rgb(15 21 17),
    surface-variant: rgb(64 73 67),
    surface-container: rgb(27 33 30),
    surface-container-low: rgb(23 29 26),
    surface-container-high: rgb(37 43 40),
    // Bordas e contornos
    border: rgb(64 73 67),
    outline: rgb(138 147 140),
    outline-variant: rgb(64 73 67),
    // Estados e feedback
    on-primary: rgb(0 56 38),
    on-secondary: rgb(31 53 42),
    on-surface: rgb(222 228 222),
    on-surface-variant: rgb(191 201 194),
    // Containers
    primary-container: rgb(0 81 56),
    secondary-container: rgb(53 75 64),
    tertiary-container: rgb(36 76 91),
    // Cores de estado
    error: rgb(255 180 171),
    on-error: rgb(105 0 5),
    // Utilitárias
    muted: rgb(138 147 140),
    shadow: rgb(0 0 0),
    inverse-surface: rgb(222 228 222),
    inverse-on-surface: rgb(44 50 46),
  ),

  light-hc: (
    // Cores principais - High Contrast
    text: rgb(0 0 0),
    background: rgb(245 251 245),
    primary: rgb(0 51 34),
    secondary: rgb(27 48 38),
    accent: rgb(79 24 45),
    // Accent high contrast
    // Superfícies
    surface: rgb(245 251 245),
    surface-variant: rgb(219 229 221),
    surface-container: rgb(222 228 222),
    surface-container-low: rgb(237 242 236),
    surface-container-high: rgb(208 214 208),
    // Bordas com alto contraste
    border: rgb(66 75 70),
    outline: rgb(37 46 41),
    outline-variant: rgb(66 75 70),
    // Estados com contraste máximo
    on-primary: rgb(255 255 255),
    on-secondary: rgb(255 255 255),
    on-surface: rgb(0 0 0),
    on-surface-variant: rgb(0 0 0),
    // Containers high contrast
    primary-container: rgb(0 84 58),
    secondary-container: rgb(56 78 67),
    tertiary-container: rgb(39 78 93),
    // Cores de estado
    error: rgb(96 0 4),
    on-error: rgb(255 255 255),
    // Utilitárias
    muted: rgb(37 46 41),
    shadow: rgb(0 0 0),
    inverse-surface: rgb(44 50 46),
    inverse-on-surface: rgb(255 255 255),
  ),

  dark-hc: (
    // Cores principais - Dark High Contrast
    text: rgb(255 255 255),
    background: rgb(0 0 0),
    primary: rgb(183 255 219),
    secondary: rgb(222 255 235),
    accent: rgb(255 181 207),
    // Accent dark high contrast
    // Superfícies
    surface: rgb(0 0 0),
    surface-variant: rgb(64 73 67),
    surface-container: rgb(27 33 30),
    surface-container-low: rgb(15 21 17),
    surface-container-high: rgb(37 43 40),
    // Bordas com alto contraste
    border: rgb(191 201 194),
    outline: rgb(191 201 194),
    outline-variant: rgb(138 147 140),
    // Estados com contraste máximo
    on-primary: rgb(0 0 0),
    on-secondary: rgb(0 0 0),
    on-surface: rgb(255 255 255),
    on-surface-variant: rgb(255 255 255),
    // Containers high contrast
    primary-container: rgb(0 107 74),
    secondary-container: rgb(78 102 90),
    tertiary-container: rgb(64 107 123),
    // Cores de estado
    error: rgb(255 199 190),
    on-error: rgb(0 0 0),
    // Utilitárias
    muted: rgb(191 201 194),
    shadow: rgb(0 0 0),
    inverse-surface: rgb(222 228 222),
    inverse-on-surface: rgb(0 0 0),
  ),
);

// Manter compatibilidade com sistema antigo
$themes: $md3-themes;

// Mixins para aplicação de temas
@mixin apply-theme-properties($theme) {
  $theme-map: map.get($md3-themes, $theme);

  @if not $theme-map {
    @error "Theme '#{$theme}' not found. Available themes: #{map.keys($md3-themes)}";
  }

  @each $key, $value in $theme-map {
    --#{$key}: #{$value};
  }
}

@mixin apply-theme-properties-important($theme) {
  $theme-map: map.get($md3-themes, $theme);

  @if not $theme-map {
    @error "Theme '#{$theme}' not found. Available themes: #{map.keys($md3-themes)}";
  }

  @each $key, $value in $theme-map {
    --#{$key}: #{$value} !important;
  }
}

// Função para acessar cores do tema
@function theme-color($key, $theme: light) {
  @return map.get(map.get($md3-themes, $theme), $key);
}

// Função para acessar cores MD3 diretamente
@function md3-color($key, $theme: light) {
  @return map.get(map.get($md3-themes, $theme), $key);
}

// Mixins utilitários aprimorados para MD3
@mixin color-variants($base-color, $prefix: "") {
  #{$prefix}color: $base-color;
  #{$prefix}color-light: color.scale($base-color, $lightness: 15%);
  #{$prefix}color-dark: color.scale($base-color, $lightness: -15%);
  #{$prefix}color-transparent: color.scale($base-color, $alpha: -50%);
}

@mixin md3-interactive-states(
  $base-color,
  $text-color: null,
  $container-color: null
) {
  background: $base-color;
  @if $text-color {
    color: $text-color;
  }

  &:hover {
    background: $container-color or color.scale($base-color, $lightness: -8%);
    @if $container-color {
      backdrop-filter: brightness(0.92);
    }
  }

  &:focus {
    background: $container-color or color.scale($base-color, $lightness: -5%);
    box-shadow: 0 0 0 3px color.scale($base-color, $alpha: -70%);
    outline: 2px solid color.scale($base-color, $alpha: -30%);
  }

  &:active {
    background: $container-color or color.scale($base-color, $lightness: -12%);
    transform: scale(0.98);
  }

  &:disabled {
    background: color.scale($base-color, $alpha: -75%);
    color: color.scale($text-color or $base-color, $alpha: -60%);
    cursor: not-allowed;
  }
}

// Mixin para elementos com elevação MD3
@mixin md3-elevation($level: 1) {
  @if $level == 1 {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  } @else if $level == 2 {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
  } @else if $level == 3 {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
  } @else if $level == 4 {
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  } @else if $level == 5 {
    box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
  }
}

// Esquemas MD3 originais completos para classes utilitárias
// ===== MATERIAL DESIGN 3 COLOR SCHEMES (HSL) =====
// Converted from RGB to HSL for better contrast analysis and manipulation
// HSL values allow easier visual comparison and lightness adjustments

$md3-schemes: (
  light: (
    primary: hsl(158, 55%, 27%),
    // Dark green - good for buttons
    surface-tint: hsl(158, 55%, 27%),
    on-primary: hsl(0, 0%, 100%),
    // White text on primary
    primary-container: hsl(151, 74%, 80%),
    // Light green container
    on-primary-container: hsl(161, 100%, 16%),
    // Dark green text (AA contrast)
    secondary: hsl(147, 13%, 35%),
    // Muted green
    on-secondary: hsl(0, 0%, 100%),
    secondary-container: hsl(143, 37%, 86%),
    on-secondary-container: hsl(150, 17%, 25%),
    tertiary: hsl(200, 22%, 40%),
    // Blue-gray
    on-tertiary: hsl(0, 0%, 100%),
    tertiary-container: hsl(200, 88%, 87%),
    // Light blue
    on-tertiary-container: hsl(196, 43%, 25%),
    error: hsl(0, 75%, 42%),
    // Red error
    on-error: hsl(0, 0%, 100%),
    error-container: hsl(6, 100%, 92%),
    // Light red
    on-error-container: hsl(358, 100%, 13%),
    // Dark red (AA contrast)
    background: hsl(120, 43%, 97%),
    // Very light green-tinted white
    on-background: hsl(150, 12%, 10%),
    // Dark text (AA contrast: 6.8)
    surface: hsl(120, 43%, 97%),
    on-surface: hsl(150, 12%, 10%),
    surface-variant: hsl(132, 16%, 88%),
    on-surface-variant: hsl(140, 7%, 27%),
    outline: hsl(140, 4%, 46%),
    outline-variant: hsl(138, 8%, 77%),
    shadow: hsl(0, 0%, 0%),
    scrim: hsl(0, 0%, 0%),
    inverse-surface: hsl(140, 6%, 18%),
    inverse-on-surface: hsl(110, 19%, 94%),
    inverse-primary: hsl(152, 46%, 69%),
    surface-dim: hsl(130, 8%, 85%),
    surface-bright: hsl(120, 43%, 97%),
    surface-container-lowest: hsl(0, 0%, 100%),
    surface-container-low: hsl(120, 23%, 95%),
    surface-container: hsl(120, 14%, 93%),
    surface-container-high: hsl(120, 12%, 91%),
    surface-container-highest: hsl(120, 10%, 88%),
  ),
  dark: (
    primary: hsl(152, 46%, 69%),
    // Light green - good contrast
    surface-tint: hsl(152, 46%, 69%),
    on-primary: hsl(161, 100%, 11%),
    // Very dark green
    primary-container: hsl(161, 100%, 16%),
    // Dark green container
    on-primary-container: hsl(151, 74%, 80%),
    // Light green text
    secondary: hsl(146, 20%, 75%),
    // Light muted green
    on-secondary: hsl(150, 26%, 16%),
    secondary-container: hsl(150, 17%, 25%),
    on-secondary-container: hsl(143, 37%, 86%),
    tertiary: hsl(201, 48%, 76%),
    // Light blue
    on-tertiary: hsl(197, 68%, 16%),
    tertiary-container: hsl(196, 43%, 25%),
    on-tertiary-container: hsl(200, 88%, 87%),
    error: hsl(6, 100%, 84%),
    // Light red
    on-error: hsl(357, 100%, 21%),
    error-container: hsl(356, 100%, 29%),
    on-error-container: hsl(6, 100%, 92%),
    background: hsl(140, 17%, 7%),
    // Very dark green-tinted
    on-background: hsl(120, 10%, 88%),
    // Light text (AA contrast: 7.8)
    surface: hsl(140, 17%, 7%),
    on-surface: hsl(120, 10%, 88%),
    surface-variant: hsl(140, 7%, 27%),
    on-surface-variant: hsl(138, 8%, 77%),
    outline: hsl(133, 4%, 56%),
    outline-variant: hsl(140, 7%, 27%),
    shadow: hsl(0, 0%, 0%),
    scrim: hsl(0, 0%, 0%),
    inverse-surface: hsl(120, 10%, 88%),
    inverse-on-surface: hsl(140, 6%, 18%),
    inverse-primary: hsl(158, 55%, 27%),
    surface-dim: hsl(140, 17%, 7%),
    surface-bright: hsl(150, 8%, 16%),
    surface-container-lowest: hsl(140, 23%, 5%),
    surface-container-low: hsl(150, 12%, 10%),
    surface-container: hsl(150, 10%, 12%),
    surface-container-high: hsl(150, 8%, 16%),
    surface-container-highest: hsl(150, 6%, 20%),
  ),
  light-hc: (
    primary: hsl(160, 100%, 10%),
    // Very dark green - max contrast
    surface-tint: hsl(158, 55%, 27%),
    on-primary: hsl(0, 0%, 100%),
    // Pure white
    primary-container: hsl(161, 100%, 16%),
    on-primary-container: hsl(0, 0%, 100%),
    secondary: hsl(151, 28%, 15%),
    // Very dark green
    on-secondary: hsl(0, 0%, 100%),
    secondary-container: hsl(150, 16%, 26%),
    on-secondary-container: hsl(0, 0%, 100%),
    tertiary: hsl(195, 97%, 13%),
    // Very dark blue
    on-tertiary: hsl(0, 0%, 100%),
    tertiary-container: hsl(197, 41%, 26%),
    on-tertiary-container: hsl(0, 0%, 100%),
    error: hsl(358, 100%, 19%),
    // Very dark red
    on-error: hsl(0, 0%, 100%),
    error-container: hsl(356, 100%, 30%),
    on-error-container: hsl(0, 0%, 100%),
    background: hsl(120, 43%, 97%),
    on-background: hsl(150, 12%, 10%),
    surface: hsl(120, 43%, 97%),
    on-surface: hsl(0, 0%, 0%),
    // Pure black for max contrast
    surface-variant: hsl(132, 16%, 88%),
    on-surface-variant: hsl(0, 0%, 0%),
    // Pure black
    outline: hsl(147, 11%, 16%),
    outline-variant: hsl(147, 6%, 28%),
    shadow: hsl(0, 0%, 0%),
    scrim: hsl(0, 0%, 0%),
    inverse-surface: hsl(140, 6%, 18%),
    inverse-on-surface: hsl(0, 0%, 100%),
    inverse-primary: hsl(152, 46%, 69%),
    surface-dim: hsl(130, 4%, 72%),
    surface-bright: hsl(120, 43%, 97%),
    surface-container-lowest: hsl(0, 0%, 100%),
    surface-container-low: hsl(110, 19%, 94%),
    surface-container: hsl(120, 10%, 88%),
    surface-container-high: hsl(120, 7%, 83%),
    surface-container-highest: hsl(120, 5%, 77%),
  ),
  dark-hc: (
    primary: hsl(150, 100%, 86%),
    // Very light green - max contrast
    surface-tint: hsl(152, 46%, 69%),
    on-primary: hsl(0, 0%, 0%),
    // Pure black
    primary-container: hsl(161, 100%, 21%),
    on-primary-container: hsl(0, 0%, 100%),
    secondary: hsl(144, 100%, 94%),
    // Very light green
    on-secondary: hsl(0, 0%, 0%),
    secondary-container: hsl(150, 13%, 35%),
    on-secondary-container: hsl(0, 0%, 100%),
    tertiary: hsl(180, 100%, 89%),
    // Very light cyan
    on-tertiary: hsl(0, 0%, 0%),
    tertiary-container: hsl(196, 32%, 37%),
    on-tertiary-container: hsl(0, 0%, 100%),
    error: hsl(8, 100%, 87%),
    // Very light red
    on-error: hsl(0, 0%, 0%),
    error-container: hsl(0, 71%, 43%),
    on-error-container: hsl(0, 0%, 100%),
    background: hsl(0, 0%, 0%),
    // Pure black
    on-background: hsl(0, 0%, 100%),
    // Pure white (max contrast: 21.0)
    surface: hsl(0, 0%, 0%),
    on-surface: hsl(0, 0%, 100%),
    surface-variant: hsl(140, 7%, 27%),
    on-surface-variant: hsl(0, 0%, 100%),
    outline: hsl(138, 8%, 77%),
    outline-variant: hsl(133, 4%, 56%),
    shadow: hsl(0, 0%, 0%),
    scrim: hsl(0, 0%, 0%),
    inverse-surface: hsl(120, 10%, 88%),
    inverse-on-surface: hsl(0, 0%, 0%),
    inverse-primary: hsl(158, 55%, 27%),
    surface-dim: hsl(0, 0%, 0%),
    surface-bright: hsl(150, 8%, 16%),
    surface-container-lowest: hsl(0, 0%, 0%),
    surface-container-low: hsl(140, 17%, 7%),
    surface-container: hsl(150, 10%, 12%),
    surface-container-high: hsl(150, 8%, 16%),
    surface-container-highest: hsl(150, 6%, 20%),
  ),
);

// Mixin para aplicar esquemas MD3 completos
@mixin apply-md3-scheme($scheme: light) {
  $scheme-map: map.get($md3-schemes, $scheme);

  @if not $scheme-map {
    @error "Esquema MD3 '#{$scheme}' não encontrado. Disponíveis: #{map.keys($md3-schemes)}";
  }

  @each $key, $value in $scheme-map {
    --md-sys-color-#{$key}: #{$value};
  }
}

// Classes utilitárias MD3
.md3-light {
  @include apply-md3-scheme(light);
}

.md3-dark {
  @include apply-md3-scheme(dark);
}

.md3-light-hc {
  @include apply-md3-scheme(light-hc);
}

.md3-dark-hc {
  @include apply-md3-scheme(dark-hc);
}

// Mixin para efeito ripple Material
@mixin md3-ripple() {
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.15);
    transform: translate(-50%, -50%);
    transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1),
      height 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    z-index: 0;
  }

  &:active::before {
    width: 300px;
    height: 300px;
  }
}

// Ripple para temas escuros - aplicado globalmente
@media (prefers-color-scheme: dark) {
  .button::before,
  [class*="md3-ripple"]::before {
    background: rgba(255, 255, 255, 0.1) !important;
  }
}

:root[data-theme="dark"],
:root.dark-theme {
  .button::before,
  [class*="md3-ripple"]::before {
    background: rgba(255, 255, 255, 0.1) !important;
  }
}

// Mixin para componentes Material otimizados
@mixin md3-component-colors($component: "button") {
  @if $component == "button" {
    background-color: var(
      --md-sys-color-surface-container-high,
      var(--surface-container-high)
    );
    color: var(--md-sys-color-on-surface, var(--on-surface));
    border-color: var(--md-sys-color-outline-variant, var(--outline-variant));

    &:hover {
      background-color: var(
        --md-sys-color-secondary-container,
        var(--secondary-container)
      );
      color: var(--md-sys-color-on-secondary-container, var(--on-secondary));
      border-color: var(--md-sys-color-secondary, var(--secondary));
    }

    &:focus {
      background-color: var(
        --md-sys-color-primary-container,
        var(--primary-container)
      );
      color: var(--md-sys-color-on-primary-container, var(--on-primary));
      border-color: var(--md-sys-color-primary, var(--primary));
    }
  } @else if $component == "card" {
    background-color: var(
      --md-sys-color-surface-container,
      var(--surface-container)
    );
    color: var(--md-sys-color-on-surface, var(--on-surface));
    border-color: var(--md-sys-color-outline-variant, var(--outline-variant));
  } @else if $component == "surface" {
    background-color: var(--md-sys-color-surface, var(--surface));
    color: var(--md-sys-color-on-surface, var(--on-surface));
  }
}

// Compatibilidade com sistema antigo
@mixin interactive-states($base-color, $text-color: null) {
  @include md3-interactive-states($base-color, $text-color);
}

// ===== HSL COLOR UTILITIES =====
// Functions for enhanced color manipulation and contrast analysis

// Enhanced HSL-based color adjustments
@function adjust-hsl-lightness($color, $percentage) {
  @return hsl(hue($color), saturation($color), lightness($color) + $percentage);
}

@function adjust-hsl-saturation($color, $percentage) {
  @return hsl(hue($color), saturation($color) + $percentage, lightness($color));
}

// Hover/focus state generators with better contrast
@function create-hover-state($base-color, $contrast-boost: 10%) {
  $current-lightness: lightness($base-color);

  @if $current-lightness > 50% {
    // Light colors get darker on hover
    @return adjust-hsl-lightness($base-color, -$contrast-boost);
  } @else {
    // Dark colors get lighter on hover
    @return adjust-hsl-lightness($base-color, $contrast-boost);
  }
}

@function create-focus-state($base-color, $contrast-boost: 15%) {
  @return create-hover-state($base-color, $contrast-boost);
}

// Enhanced contrast validation
@function contrast-ratio($color1, $color2) {
  $l1: lightness($color1) / 100%;
  $l2: lightness($color2) / 100%;
  $lighter: max($l1, $l2);
  $darker: min($l1, $l2);
  @return ($lighter + 0.05) / ($darker + 0.05);
}

@function has-sufficient-contrast($fg, $bg, $level: "AA") {
  $ratio: contrast-ratio($fg, $bg);
  @if $level == "AAA" {
    @return $ratio >= 7;
  } @else {
    @return $ratio >= 4.5;
  }
}

// Smart color picker with fallback
@function smart-text-color(
  $bg-color,
  $light-text: hsl(0, 0%, 100%),
  $dark-text: hsl(0, 0%, 0%)
) {
  @if has-sufficient-contrast($light-text, $bg-color) {
    @return $light-text;
  } @else if has-sufficient-contrast($dark-text, $bg-color) {
    @return $dark-text;
  } @else {
    // Force better contrast by adjusting lightness
    @if lightness($bg-color) > 50% {
      @return hsl(0, 0%, 0%); // Force black for light backgrounds
    } @else {
      @return hsl(0, 0%, 100%); // Force white for dark backgrounds
    }
  }
}

// Enhanced MD3 color getter with HSL manipulation
@function md3-color-enhanced(
  $theme,
  $role,
  $lightness-adjust: 0%,
  $saturation-adjust: 0%
) {
  $base-color: md3-color($theme, $role);

  @if $lightness-adjust != 0% or $saturation-adjust != 0% {
    @return hsl(
      hue($base-color),
      saturation($base-color) + $saturation-adjust,
      lightness($base-color) + $lightness-adjust
    );
  }

  @return $base-color;
}

// Automatic button state generator
@mixin button-states($base-bg, $base-text: null) {
  $text-color: if($base-text, $base-text, smart-text-color($base-bg));

  background-color: $base-bg;
  color: $text-color;
  border-color: $base-bg;

  &:hover {
    $hover-bg: create-hover-state($base-bg);
    background-color: $hover-bg;
    color: smart-text-color($hover-bg);
    border-color: $hover-bg;
    box-shadow: 0 2px 8px hsla(hue($base-bg), saturation($base-bg), 0%, 0.2);
  }

  &:focus {
    $focus-bg: create-focus-state($base-bg);
    background-color: $focus-bg;
    color: smart-text-color($focus-bg);
    border-color: $focus-bg;
    box-shadow: 0 0 0 2px
        hsl(hue($base-bg), saturation($base-bg), lightness($base-bg) + 20%),
      0 2px 8px hsla(hue($base-bg), saturation($base-bg), 0%, 0.3);
  }

  &:active {
    $active-bg: create-hover-state($base-bg, 15%);
    background-color: $active-bg;
    color: smart-text-color($active-bg);
    transform: translateY(1px);
  }
}

// Notification states with enhanced contrast
@mixin notification-variant($color-role, $container-lightness: 90%) {
  // Use CSS custom properties directly since we can't manipulate them in SASS
  border-left: 4px solid var(#{$color-role});

  // Create container background based on theme
  :root[data-theme="light"] &,
  :root.light-theme &,
  :root:not([data-theme]) & {
    background-color: var(--md-sys-color-surface-container-high);
    color: var(--md-sys-color-on-surface);
  }

  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) & {
      background-color: var(--md-sys-color-surface-container-high);
      color: var(--md-sys-color-on-surface);
    }
  }

  :root[data-theme="dark"] &,
  :root.dark-theme & {
    background-color: var(--md-sys-color-surface-container-high);
    color: var(--md-sys-color-on-surface);
  }

  :root[data-theme="light-hc"] &,
  :root.light-hc-theme & {
    background-color: var(--md-sys-color-surface-container);
    color: var(--md-sys-color-on-surface);
  }

  :root[data-theme="dark-hc"] &,
  :root.dark-hc-theme & {
    background-color: var(--md-sys-color-surface-container);
    color: var(--md-sys-color-on-surface);
  }

  .notification-title {
    color: var(#{$color-role});
    font-weight: 600;
  }

  .notification-close,
  .delete {
    color: var(--md-sys-color-on-surface);
    opacity: 0.7;

    &:hover {
      opacity: 1;
      background-color: var(--md-sys-color-surface-container-highest);
    }
  }
}
